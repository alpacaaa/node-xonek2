// Generated by CoffeeScript 1.8.0
(function() {
  var Button, Channel, EndlessKnob, XONEK2, constants, main, midi, midi_connection, targetPort;

  midi = require('midi');

  Button = require('./button');

  Channel = require('./channel');

  EndlessKnob = require('./endless_knob');

  targetPort = 'XONE:K2';

  constants = {
    COLOR_RED: 0,
    COLOR_GREEN: 1,
    COLOR_ORANGE: 2
  };

  midi_connection = {
    input: null,
    output: null
  };

  XONEK2 = (function() {
    XONEK2.prototype.components = {};

    XONEK2.prototype.utils = {};

    XONEK2.prototype.is_connected = false;

    function XONEK2() {
      this.channels = [0, 1, 2, 3].map(function(channel) {
        return new Channel(channel);
      });
      this.utils = this.initUtils();
      this.components = this.initComponents();
    }

    XONEK2.prototype.connect = function() {
      var port;
      this.openMidiConnection();
      port = this.findValidPort();
      if (port === false) {
        return;
      }
      midi_connection.input.openPort(port);
      midi_connection.output.openPort(port);
      this.initListener();
      return this.is_connected = true;
    };

    XONEK2.prototype.openMidiConnection = function() {
      midi_connection.input = new midi.input();
      return midi_connection.output = new midi.output();
    };

    XONEK2.prototype.findValidPort = function() {
      var current, input, portsCount;
      input = midi_connection.input;
      portsCount = input.getPortCount();
      while (portsCount--) {
        current = input.getPortName(portsCount);
        if (current === main.port) {
          return portsCount;
        }
      }
      return false;
    };

    XONEK2.prototype.initComponents = function() {
      var addButton, ret;
      addButton = function(acc, button) {
        acc[button.position_pressed] = button;
        return acc[button.position_released] = button;
      };
      ret = this.channels.reduce((function(acc, channel) {
        var endless_knob, fader;
        channel.knobs.forEach(function(knob) {
          var button;
          button = knob.button;
          acc[knob.position] = knob;
          return addButton(acc, button);
        });
        fader = channel.fader;
        acc[fader.position] = fader;
        endless_knob = channel.endless_knob;
        acc[endless_knob.position] = endless_knob;
        addButton(acc, endless_knob.button);
        channel.buttons.forEach(function(button) {
          return addButton(acc, button);
        });
        return acc;
      }), {});
      this.utils.buttons.forEach(function(button) {
        return addButton(ret, button);
      });
      this.utils.endless_knobs.forEach(function(knob) {
        var button;
        button = knob.button;
        ret[knob.position] = knob;
        return addButton(ret, button);
      });
      return ret;
    };

    XONEK2.prototype.initUtils = function() {
      return {
        buttons: [new Button(0, 9), new Button(3, 9)],
        endless_knobs: [
          new EndlessKnob(20, {
            button: 13
          }), new EndlessKnob(21, {
            button: 14
          })
        ]
      };
    };

    XONEK2.prototype.initListener = function() {
      var input;
      input = midi_connection.input;
      return input.on('message', (function(_this) {
        return function(time, msg) {
          var component, position;
          position = msg.slice(0, 2).toString();
          component = _this.components[position];
          if (!component) {
            return;
          }
          return component.updateValue(msg[2]);
        };
      })(this));
    };

    XONEK2.prototype.reset_leds = function() {
      var output, _i, _results;
      output = midi_connection.output;
      return (function() {
        _results = [];
        for (_i = 0; _i <= 127; _i++){ _results.push(_i); }
        return _results;
      }).apply(this).forEach(function(index) {
        return output.sendMessage([158, index, 0]);
      });
    };

    return XONEK2;

  })();

  main = {
    create: function() {
      return new XONEK2;
    },
    midi: midi_connection,
    port: targetPort
  };

  Object.keys(constants).forEach(function(item) {
    return main[item] = constants[item];
  });

  module.exports = main;

}).call(this);
